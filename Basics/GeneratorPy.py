'''
Generator.
'''

__all__=['Generator']

from ConstantPy import *
from OperatorPy import *
from numpy import *
from numpy.linalg import norm
from collections import OrderedDict

class Generator:
    '''
    This class provides methods to generate and update operators according to terms, bonds and configuration of degrees of freedom.
    Attributes:
        bonds: list of Bond
            The bonds of the model.
        table: Table
            The index-sequence table of the system
        config: Configuration
            The configuration of degrees of freedom.
        parameters: dict
            It contains all model parameters, divided into two groups, the constant ones and the alterable ones.
        terms: dict
            It contains all terms contained in the model, divided into two groups, the constant ones and the alterable ones.
        cache: dict
            The working space used to handle the generation and update of the operators.
    '''

    def __init__(self,bonds,table,config,terms=None):
        '''
        Constructor.
        Parameter:
            bonds: list of Bond
                The bonds.
            table: Table
                The index-sequence table.
            config: Configuration
                The configuration of degrees of freedom.
            terms: list of Term,optional
                The terms whose corresponding operators are to be generated and updated.
                Those terms having the attribute modulate will go into self.terms['alter'] and the others will go into self.terms['const'].
        '''
        self.bonds=bonds
        self.table=table
        self.config=config
        self.parameters={}
        self.terms={}
        self.set_parameters_and_terms(terms)
        self.cache={}
        self.set_cache()

    def set_parameters_and_terms(self,terms):
        self.parameters['const']=OrderedDict()
        self.parameters['alter']=OrderedDict()
        self.terms['const']={}
        self.terms['alter']={}
        if terms is not None:
            for term in terms:
                if hasattr(term,'modulate'):
                    self.parameters['alter'][term.id]=term.value
                    self.terms['alter'][term.id]=+term
                else:
                    self.parameters['const'][term.id]=term.value
                    lterm=+term
                    if lterm.__class__.__name__ in self.terms['const']:
                        self.terms['const'][lterm.__class__.__name__].extend(lterm)
                    else:
                        self.terms['const'][lterm.__class__.__name__]=lterm

    def set_cache(self):
        if 'const' in self.terms:
            self.cache['const']=OperatorCollection()
            for bond in self.bonds:
                for terms in self.terms['const'].itervalues():
                    self.cache['const']+=terms.operators(bond,self.table,self.config)
        if 'alter' in self.terms:
            self.cache['alter']={}
            for key in self.terms['alter'].iterkeys():
                self.cache['alter'][key]=OperatorCollection()
                for bond in self.bonds:
                    self.cache['alter'][key]+=self.terms['alter'][key].operators(bond,self.table,self.config)

    def __str__(self):
        '''
        Convert an instance to string.
        '''
        result=[]
        result.append('Generator(parameters=%s'.self.parameters)
        result.append('terms=(%s'%(', '.join(['%s:%s'%(key,obj) for key,obj in self.terms['const'].iteritems()])))
        result.append('%s%s='%(', '.join(['%s:%s'%(key,obj) for key,obj in self.terms['alter'].iteritems()]),')'))
        result.append(')')
        return ', '.join(result)

    @property
    def operators(self):
        '''
        This method returns all the operators generated by self.
        '''
        result=OperatorCollection()
        if 'const' in self.cache:
            result.update(self.cache['const'])
        if 'alter' in self.cache:
            for opts in self.cache['alter'].itervalues():
                result+=opts
        return result

    def update(self,**karg):
        '''
        This method updates the alterable operators by keyword arguments.
        '''
        if 'alter' in self.terms:
            masks={key:False for key in self.terms['alter'].iterkeys()}
            for key,term in self.terms['alter'].iteritems():
                nv=term[0].modulate(**karg)
                if nv is not None and norm(array(nv)-array(term[0].value))>RZERO:
                    term[0].value=nv
                    self.parameters['alter'][key]=nv
                    masks[key]=True
            for key,mask in masks.iteritems():
                if mask:
                    self.cache['alter'][key]=OperatorCollection()
                    for bond in self.bonds:
                        self.cache['alter'][key]+=self.terms['alter'][key].operators(bond,self.table,self.config)
